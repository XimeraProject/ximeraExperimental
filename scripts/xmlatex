#!/bin/bash
#
# This script is a wrapper around (and in its full version an extension of) ximera's xake command
#  THAT ENSURES IT'S RUNNING IN A DOCKER CONTAINER 
#
# Usage: 
#   xmlatex bake
#   xmlatex compile test/myximerafile.tex
#   xmlatex serve     # this will also run 'xake frost'
#   xmlatex -i bash   # gets a bash-shell INSIDE the container
#
# Advanced usage
#   XAKE_IMAGE=ghcr.io/ximeraproject/xake2023:latest xmlatex compile demo.tex    # use a different docker image
#   COMMAND=pdflatex xmlatex demo.tex                                            # do not run the xake-wrapper, but $COMMAND
#
# This script
#  - loads some configuration from ./scripts/config.tex (can be overwritten with CONFIG_FILE)
#  - for serving, also (basefolder)/.ximeraserve will be read (for GPG key settings)
#  - starts a xake docker container (unless we're already IN a container)
#  - starts (presumably) a container-specific version of this very script
#  - that (presumably) starts xake with the arguments passed to this script
#  - optionally gets you a shell inside the container
#  - optionally automates lots of other things
#
# Note: set environment variable 'export DEBUG=1' and/or use -d option for debugging/tracing
# Note: this scripts RESTARTS itself (or a variant of itself!!!) IN A DOCKER CONTAINER
#
#
: "${CONFIG_FILE:=./scripts/config.txt}"

if [[ -f "$CONFIG_FILE" ]]
then
        [[ -n "$DEBUG" ]] && echo "Loading settings from config file $CONFIG_FILE."
        . $CONFIG_FILE
else
        [[ -n "$DEBUG" ]] && echo "No local settings found (no file $CONFIG_FILE)."
fi


# Set some defaults
#
# default docker image to run; overwrite with 'export XAKE_IMAGE=myxake:0.1'
#: "${XAKE_IMAGE:=ghcr.io/ximeraproject/xake2023:v2.1.1}" 
: "${XAKE_BASE:=xake2019}"
: "${XAKE_VERSION:=v2.1.1}"
: "${XAKE_CONTAINER:=$XAKE_BASE:$XAKE_VERSION}"
: "${DOCKER_REPO:=ghcr.io/ximeraproject/}"

# For historic compatibility, keep supporting XAKE_IMAKE
: "${XAKE_IMAGE:=$DOCKER_REPO$XAKE_CONTAINER}"   # TO BE OBSOLETED
: "${DOCKER_IMAGE:=$XAKE_IMAGE}"

: "${SERVER_PORT:=2000}"
: "${SERVER_NAME:=ximeraserver}"
: "${SERVER_IMAGE:=registry.gitlab.kuleuven.be/wet/ximera/ximeradocker:2.3.7j}"
#
# Which folder to mount INSIDE the container, under /code  (use with care: it should contain a build.sh !)
: "${MOUNTDIR:=$(pwd)}"
#
# Which script to start inside the container; 
: "${COMMAND:=xmlatex}"
# : "${COMMAND:=pdflatex}"     # skip xmlatex inside the container, and directly run a specific command ...    
# : "${COMMAND:=./build.sh}"   # only usefull for OLD xake-images, which used a now obsolete build.sh script


if [[ -f /.dockerenv ]]  
then
    echo "Running in docker container (with local hostname $HOSTNAME)"
elif [[ -n "$KUBERNETES_SERVICE_HOST" ]] 
then
    echo "Running in kubernetes container ($KUBERNETES_SERVICE_HOST)"
else 
    [[ -n "$DEBUG" ]] && echo "Running $0 on host ($HOSTNAME)"

    if [[ "$1" == "-i" ]]
    then
        INTERACTIVE="-it"  # start an interactive docker session (i.e. with a terminal attached)
        shift 
    fi 

    # LOCAL_IP is only needed if you want to serve to a ximeraServer on your localhost; do NOT use URL_XIMERA when using LOCAL_IP
    if [[ "$LOCAL_IP" == "" ]]
    then
        LOCAL_IP=$(set -- $(hostname -I); echo "$1")
        [[ -n "$DEBUG" ]] && echo "Setting LOCAL_IP=$LOCAL_IP"
    fi

    if [[ "$1" == "ximeraserver" ]]
    then    
        echo "Starting ximera $SERVER_NAME from $SERVER_IMAGE of port $SERVER_PORT"
        docker run --rm --name $SERVER_NAME -p 2000:$SERVER_PORT $SERVER_IMAGE
        exit
    fi

    echo "Restarting myself in docker (from image $DOCKER_IMAGE)"	
    [[ -n "$DEBUG" ]] && echo  \
    docker run --env LOCAL_IP --env URL_XIMERA --env REPO_XIMERA --env GPG_KEY --env GPG_KEY_ID --network host --rm $INTERACTIVE --mount type=bind,source=$MOUNTDIR,target=/code $DOCKER_IMAGE $COMMAND $*
    docker run --env LOCAL_IP --env URL_XIMERA --env REPO_XIMERA --env GPG_KEY --env GPG_KEY_ID --network host --rm $INTERACTIVE --mount type=bind,source=$MOUNTDIR,target=/code $DOCKER_IMAGE $COMMAND $*
    exit 
fi

#
# The 'REAL' contents are ommitted in this version, but (presumably...) are present in the copy *inside* the container $DOCKER_IMAGE !!!!
#
echo "Sorry, this limited version of this xmlatex script should not be run *inside* a docker container. Find and run the full version, perhaps called xmlatex.full!"
exit 1